<?php

$NAMESPACE$

use Illuminate\Http\Request;

use $APPNAME$Http\Requests;
use Illuminate\Support\Facades\Log;
use Prettus\Validator\Contracts\ValidatorInterface;
use Prettus\Validator\Exceptions\ValidatorException;
use $APPNAME$Http\Requests\$CLASS$CreateRequest;
use $APPNAME$Http\Requests\$CLASS$UpdateRequest;
$REPOSITORY$
$VALIDATOR$

/**
 * Class $CONTROLLER$Controller.
 *
 * @package $NAMESPACE$
 */
class $CONTROLLER$Controller extends Controller
{
    /**
     * @var $CLASS$Repository
     */
    protected $repository;

    /**
     * @var $CLASS$Validator
     */
    protected $validator;

    /**
     * $CONTROLLER$Controller constructor.
     *
     * @param $CLASS$Repository $repository
     * @param $CLASS$Validator $validator
     */
    public function __construct($CLASS$Repository $repository, $CLASS$Validator $validator)
    {
        parent::__construct();
        $this->repository = $repository;
        $this->validator  = $validator;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $this->repository->pushCriteria(app('Prettus\Repository\Criteria\RequestCriteria'));
        $$PLURAL$ = $this->repository->all();
        return response()->json([
            'stat' => 'ok',
            'data' => $$PLURAL$,
        ]);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  $CLASS$CreateRequest $request
     *
     * @return \Illuminate\Http\Response
     *
     * @throws \Prettus\Validator\Exceptions\ValidatorException
     */
    public function store($CLASS$CreateRequest $request)
    {
        try {

            $this->validator->with($request->all())->passesOrFail(ValidatorInterface::RULE_CREATE);

            $$SINGULAR$ = $this->repository->create($request->all());

            $response = [
                'stat' => 'ok',
                'message' => '$CLASS$ created.',
                'data'    => $$SINGULAR$->toArray(),
            ];
            return response()->json($response);
        } catch (ValidatorException $e) {
            return response()->json([
                'stat'   => 'failed',
                'message' => $e->getMessageBag()->first(),
            ], 422);
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            return response()->json(['stat' => 'failed', 'message' => strtoupper(env('APP_NAME')) . '_SERVER_ERROR'], 500);
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show(Request $request, $id)
    {
        $$SINGULAR$ = $this->repository->find($id);
        return response()->json([
            'stat' => 'ok',
            'data' => $$SINGULAR$,
        ]);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $$SINGULAR$ = $this->repository->find($id);

        return view('$PLURAL$.edit', compact('$SINGULAR$'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  $CLASS$UpdateRequest $request
     * @param  string            $id
     *
     * @return Response
     *
     * @throws \Prettus\Validator\Exceptions\ValidatorException
     */
    public function update($CLASS$UpdateRequest $request, $id)
    {
        try {

            $this->validator->with($request->all())->passesOrFail(ValidatorInterface::RULE_UPDATE);

            $$SINGULAR$ = $this->repository->update($request->all(), $id);

            $response = [
                'stat' => 'ok',
                'message' => '$CLASS$ updated.',
            ];
            return response()->json($response);
        } catch (ValidatorException $e) {
            return response()->json([
                'stat'   => 'failed',
                'message' => $e->getMessageBag()->first()
            ], 422);
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            return response()->json(['stat' => 'failed', 'message' => strtoupper(env('APP_NAME')) . '_SERVER_ERROR'], 500);
        }
    }


    /**
     * Remove the specified resource from storage.
     *
     * @param  int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy(Request $request, $id)
    {
        $this->repository->delete($id);

        return response()->json([
            'stat' => 'ok',
            'message' => '$CLASS$ deleted.',
        ]);
    }
}
